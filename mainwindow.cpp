#include "mainwindow.h"
#include "./ui_mainwindow.h"
#include "keymanager.h"

#include <QVBoxLayout>
#include <QHBoxLayout>
#include <QPushButton>
#include <QWidget>
#include <QDateTime>
#include <QUrlQuery>
#include <QJsonObject>
#include <QJsonArray>
#include <QJsonDocument>
#include <QNetworkReply>
#include <QNetworkAccessManager>
//#include <QMessageBox> // –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ç–æ–∫–µ–Ω–∞ –∏ ChatId
//#include <QFileInfo> // –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ç–æ–∫–µ–Ω–∞ –∏ ChatId
//#include <QInputDialog> // –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ç–æ–∫–µ–Ω–∞ –∏ ChatId

MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent),
    ui(new Ui::MainWindow),
    m_engine(new TradingEngine(this)), // –ù–ï –£–î–ê–õ–Ø–¢–¨!!!!  –¥–ª—è –∫–ª–∞—Å—Å–∞ TradingEngine
    m_network(new QNetworkAccessManager(this)),
    m_dataStreamer(new DataStreamer(this)),
    m_botToken(KeyManager::instance().loadBotToken()),
    m_chatId(KeyManager::instance().loadChatId()),
    m_logger(new Logger()),
    m_viewer(new BinViewer(this))
{
    //setupBotToken(); // –∑–∞–ø–∏—Å—å —Ç–æ–∫–µ–Ω–∞ –Ω—É–∂–Ω–∞ –æ–¥–∏–Ω —Ä–∞–∑
    //setupBotChatId(); // –∑–∞–ø–∏—Å—å ChatId –Ω—É–∂–Ω–∞ –æ–¥–∏–Ω —Ä–∞–∑

    setWindowTitle("Trading Bot Controller");
    //resize(800, 600); // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    // –§–∏–∫—Å–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ (—à–∏—Ä–∏–Ω–∞, –≤—ã—Å–æ—Ç–∞)
    setFixedSize(800, 600);

    // –ò–ª–∏ –∑–∞–¥–∞—ë–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π/–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
    setMinimumSize(640, 480);
    setMaximumSize(1024, 768);

    // –°–æ–∑–¥–∞—ë–º –≥–ª–∞–≤–Ω—ã–π –≤–∏–¥–∂–µ—Ç –∏ –æ—Å–Ω–æ–≤–Ω–æ–π layout
    QWidget *centralWidget = new QWidget(this);
    QVBoxLayout *mainLayout = new QVBoxLayout(centralWidget);

    // –°–æ–∑–¥–∞—ë–º –ø–∞–Ω–µ–ª—å –∫–Ω–æ–ø–æ–∫
    QHBoxLayout *buttonLayout = new QHBoxLayout();
    startButton = new QPushButton("–°—Ç–∞—Ä—Ç", this);
    stopButton = new QPushButton("–°—Ç–æ–ø", this);
    logsButton = new QPushButton("–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏", this);
    viewBinButton = new QPushButton("–§–∞–π–ª—ã bin", this);

    buttonLayout->addWidget(startButton);
    buttonLayout->addWidget(stopButton);
    buttonLayout->addWidget(logsButton);
    buttonLayout->addWidget(viewBinButton);
    buttonLayout->setAlignment(Qt::AlignLeft);

    // –°–æ–∑–¥–∞—ë–º –ø–æ–ª–µ –¥–ª—è –ª–æ–≥–æ–≤
    logTextEdit = new QTextEdit(this);
    logTextEdit->setReadOnly(true);

    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å—ë –≤ –≥–ª–∞–≤–Ω—ã–π layout
    mainLayout->addLayout(buttonLayout);
    mainLayout->addWidget(logTextEdit);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
    setCentralWidget(centralWidget);

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã –∏ —Å–ª–æ—Ç—ã
    connect(startButton, &QPushButton::clicked, this, &MainWindow::onStartButtonClicked);
    connect(stopButton, &QPushButton::clicked, this, &MainWindow::onStopButtonClicked);
    connect(logsButton, &QPushButton::clicked, this, &MainWindow::showLogsWindow);

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª TradingEngine –¥–ª—è –ª–æ–≥–æ–≤
    connect(m_engine, &TradingEngine::newLogMessage, this, &MainWindow::logMessage);

    // –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã DataStreamer –¥–ª—è –ª–æ–≥–æ–≤
    connect(m_dataStreamer, &DataStreamer::newLogMessage, this, &MainWindow::logMessage);

    connect(viewBinButton, &QPushButton::clicked, this, &MainWindow::onBinViewerClicked);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –≤ Telegram
    //initTelegramKeyboard();

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
    QTimer *updateTimer = new QTimer(this);
    connect(updateTimer, &QTimer::timeout, [this]() {
        sendToTelegram("getUpdates", {
            {"offset", m_lastUpdateId + 1},
            {"timeout", 10},
            {"allowed_updates", QJsonArray{"callback_query"}}
        });
    });
    updateTimer->start(3000);

    m_logger->writeLog("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–ø—É—â–µ–Ω–∞", "SYSTEM"); // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞

    //m_engine->testLogOutput();  // –ù–ï –£–î–ê–õ–Ø–¢–¨!!!! –¢–µ—Å—Ç–æ–≤—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª–∞—Å—Å–∞ TradingEngine
}

// –°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª–µ
void MainWindow::initTelegramKeyboard() {
    sendToTelegram("sendMessage", {
        {"chat_id", m_chatId},
        {"text", "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º:"},
        {"reply_markup", QJsonObject{
            {"inline_keyboard", QJsonArray{
                QJsonArray{
                    QJsonObject{{"text", "‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç"}, {"callback_data", "cmd_start"}},
                    QJsonObject{{"text", "‚èπÔ∏è –°—Ç–æ–ø"}, {"callback_data", "cmd_stop"}}
                }
            }}
        }}
    });
}

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
void MainWindow::processCallback(const QJsonObject &callback) {
    const QString data = callback["data"].toString();
    //logMessage("Telegram: " + data); // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ

    if (data == "cmd_start") onStartButtonClicked();
    else if (data == "cmd_stop") onStopButtonClicked();

    // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    sendToTelegram("answerCallbackQuery", {
        {"callback_query_id", callback["id"].toString()},
        {"text", "–ö–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–Ω—è—Ç–∞"}
    });
}

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
void MainWindow::sendToTelegram(const QString &method, const QJsonObject &params) {
    QUrl url(QString("https://api.telegram.org/bot%1/%2").arg(m_botToken).arg(method));
    QNetworkRequest request(url);
    request.setHeader(QNetworkRequest::ContentTypeHeader, "application/json");

    QNetworkReply* reply = m_network->post(request, QJsonDocument(params).toJson());
    connect(reply, &QNetworkReply::finished, [this, reply, method]() {
        if (reply->error() == QNetworkReply::NoError) {
            QJsonDocument doc = QJsonDocument::fromJson(reply->readAll());
            if (method == "getUpdates") {
                for (const QJsonValue &update : doc.object()["result"].toArray()) {
                    qint64 updateId = update["update_id"].toInt();
                    if (updateId > m_lastUpdateId) {
                        m_lastUpdateId = updateId;
                        if (update.toObject().contains("callback_query")) {
                            processCallback(update["callback_query"].toObject());
                        }
                    }
                }
            }
        }
        reply->deleteLater();
    });
}

void MainWindow::onStartButtonClicked() {
    //logMessage("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!", "INFO");
    //sendTelegramSignal("EUR/USD", "–í–ù–ò–ó", "4–º–∏–Ω", 1.2650, 1.2600, 1.2700);
    m_dataStreamer->DataStreamer::startStream();
}

void MainWindow::onStopButtonClicked() {
    //logMessage("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!", "INFO");
    //sendTelegramResult("EUR/USD", "SL", 1.2650, 1.2450, 100, "4–º–∏–Ω");
    m_dataStreamer->DataStreamer::stopStream();
}

void MainWindow::onBinViewerClicked() {
    m_viewer->BinViewer::showAndDisplay(); // –ø—Ä–æ—Å–º–æ—Ç—Ä –±–∏–Ω —Ñ–∞–π–ª–æ–≤
}

void MainWindow::sendTelegramSignal(const QString &currencyPair, const QString &direction, const QString &duration,
                                    double price, double takeProfit, double stopLoss) {
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å MarkdownV2
    QString message = QString(
        "üöÄ *–¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª* üöÄ\n"
        "‚Ä¢ –ü–∞—Ä–∞: `%1`\n"
        "‚Ä¢ –°–∏–≥–Ω–∞–ª: %2, %3\n"
        "‚Ä¢ –¶–µ–Ω–∞: `%4`\n"
        "‚Ä¢ TP: `%5`\n"
        "‚Ä¢ SL: `%6`"
        ).arg(currencyPair)
         .arg(direction)
         .arg(duration)
         .arg(price, 0, 'f', 4)
         .arg(takeProfit, 0, 'f', 4)
         .arg(stopLoss, 0, 'f', 4);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
    sendToTelegram("sendMessage", {
        {"chat_id", m_chatId},
        {"text", message},
        {"parse_mode", "MarkdownV2"},
        {"disable_web_page_preview", true}
    });

    logMessage(QString("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–∏–≥–Ω–∞–ª: %1 %2, %3 | –¶–µ–Ω–∞: %4 | TP: %5 | SL: %6")
        .arg(currencyPair)
        .arg(direction)
        .arg(duration)
        .arg(price, 0, 'f', 4)
        .arg(takeProfit, 0, 'f', 4)
        .arg(stopLoss, 0, 'f', 4)
        ,"OPEN");
}

void MainWindow::sendTelegramResult(const QString &currencyPair,
                                 const QString &resultType, // "TP" / "SL" / "CLOSE"
                                 double entryPrice,
                                 double exitPrice,
                                 double profitPips,
                                 const QString &duration)
{
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∏ —Å—Ç–∞—Ç—É—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    QString icon, status;
    if (resultType == "TP") {
        icon = "‚úÖ";
        status = "–¢–µ–π–∫-–ø—Ä–æ—Ñ–∏—Ç";
    } else if (resultType == "SL") {
        icon = "‚ùå";
        status = "–°—Ç–æ–ø-–ª–æ—Å—Å";
    } else {
        icon = "üîπ";
        status = "–ó–∞–∫—Ä—ã—Ç–æ –≤—Ä—É—á–Ω—É—é";
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    QString message = QString(
                          "%1 *–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–¥–µ–ª–∫–∏* %1\n"
                          "‚Ä¢ –ü–∞—Ä–∞: `%2`\n"
                          "‚Ä¢ –û—Ç—Ä–∞–±–æ—Ç–∫–∞: `%3`\n"
                          "‚Ä¢ –í—Ä–µ–º—è —É–¥–µ—Ä–∂–∞–Ω–∏—è: %4\n"
                          "‚Ä¢ –í—Ö–æ–¥: `%5`\n"
                          "‚Ä¢ –í—ã—Ö–æ–¥: `%6`\n"
                          "‚Ä¢ –ü—Ä–æ—Ñ–∏—Ç: `%7` –ø–∏–ø—Å"
                          ).arg(icon)
                          .arg(currencyPair)
                          .arg(status)
                          .arg(duration)
                          .arg(entryPrice, 0, 'f', 4)
                          .arg(exitPrice, 0, 'f', 4)
                          .arg(profitPips, 0, 'f', 1);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
    sendToTelegram("sendMessage", {
        {"chat_id", m_chatId},
        {"text", message},
        {"parse_mode", "MarkdownV2"},
        {"disable_web_page_preview", true}
    });

    // –õ–æ–≥–∏—Ä—É–µ–º —Å –ø–æ–ª–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    QString logMsg = QString("%1 %2 | –í—Ö–æ–¥: %3 | –í—ã—Ö–æ–¥: %4 | –ü–∏–ø—Å: %5 | –í—Ä–µ–º—è: %6")
                         .arg(currencyPair)
                         .arg(status)
                         .arg(entryPrice, 0, 'f', 4)
                         .arg(exitPrice, 0, 'f', 4)
                         .arg(profitPips, 0, 'f', 1)
                         .arg(duration);

    logMessage(logMsg, "RESULT");
}

void MainWindow::logMessage(const QString &message, const QString &type) {
    // –≤—ã–≤–æ–¥ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    QString formattedMessage = QString("[%1] %2: %3")
        .arg(QDateTime::currentDateTime().toString("hh:mm:ss"))
        .arg(type)
        .arg(message);

    logTextEdit->append(formattedMessage);

    // –∑–∞–ø–∏—Å—å –≤ –ª–æ–≥-—Ñ–∞–π–ª —á–µ—Ä–µ–∑ Logger
    /*if (m_logger) {
        m_logger->writeLog(message, type);
    }*/
}

void MainWindow::showLogsWindow() {
    if (m_logger) {
        m_logger->loadLogsForDate(QDate::currentDate());
        m_logger->show();
        m_logger->activateWindow();
    }
}

MainWindow::~MainWindow() {
    m_logger->writeLog("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞", "SYSTEM"); // –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    delete ui;
}

/*void MainWindow::setupBotToken() { // –ù–ï –£–î–ê–õ–Ø–¢–¨!!!! –ù—É–∂–Ω–æ –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ç–æ–∫–µ–Ω–∞
    KeyManager& km = KeyManager::instance();

    bool ok;
    QString token = QInputDialog::getText(this, "–í–≤–æ–¥ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞", "–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω:", QLineEdit::Normal, "", &ok);

    if (!ok || token.isEmpty()) {
        qDebug() << "–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∞";
        return;
    }

    // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–æ–∫–µ–Ω–∞
    if (!token.contains(':') || token.length() < 30) {
        QMessageBox::warning(this,
                             "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç",
                             "–¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ 123456789:ABC-DEF1234ghIkl...");
        return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω
    if (km.storeBotToken(token)) {
        qDebug() << "–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!";

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω
        QFileInfo tokenFile("token.bin");
        if (tokenFile.exists()) {
            qDebug() << "–§–∞–π–ª token.bin —Å–æ–∑–¥–∞–Ω, —Ä–∞–∑–º–µ—Ä:"
                     << tokenFile.size() << "–±–∞–π—Ç";
        } else {
            qCritical() << "–û—à–∏–±–∫–∞: —Ñ–∞–π–ª —Ç–æ–∫–µ–Ω–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω!";
        }
    } else {
        qCritical() << "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω!";
    }

    return;
}*/

/*void MainWindow::setupBotChatId() { // –ù–ï –£–î–ê–õ–Ø–¢–¨!!!! –ù—É–∂–Ω–æ –¥–ª—è –∑–∞–ø–∏—Å–∏ Chat ID
    KeyManager& km = KeyManager::instance();

    bool ok;
    QString text = QInputDialog::getText(this, "–í–≤–æ–¥ Chat ID", "–í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞:", QLineEdit::Normal, "", &ok);

    if (!ok || text.isEmpty()) {
        qDebug() << "–ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω–∞";
        return;
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ int64_t
    bool conversionOk;
    int64_t chatId = text.toLongLong(&conversionOk);

    if (!conversionOk) {
        QMessageBox::warning(this, "–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Chat ID");
        return;
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º Chat ID
    if (km.storeChatId(chatId)) {
        qDebug() << "Chat ID —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!";

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω
        QFileInfo tokenFile("chatId.bin");
        if (tokenFile.exists()) {
            qDebug() << "–§–∞–π–ª chatId.bin —Å–æ–∑–¥–∞–Ω, —Ä–∞–∑–º–µ—Ä:"
                     << tokenFile.size() << "–±–∞–π—Ç";
        } else {
            qCritical() << "–û—à–∏–±–∫–∞: —Ñ–∞–π–ª chatId –Ω–µ —Å–æ–∑–¥–∞–Ω!";
        }
    } else {
        qCritical() << "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å chatId!";
    }

    return;
}*/





